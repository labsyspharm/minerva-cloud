Parameters:
  StackPrefix:
    Type: String
    Description: Unique prefix used in related stacks for use by export
  Stage:
    Type: String
    Description: Deployment stage
  ProjectTag:
    Type: String
    Description: Project tag
  # Due to the awkward way in which mount targets are constructed there must be
  # exactly two public SubnetsPublic
  SubnetsPublic:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public subnet IDs. Must be exactly two!

  # SubnetsPrivate:
  #   Type: List<AWS::EC2::Subnet::Id>
  #   Description: Private subnet IDs. Must be exactly two and be internet routeable!

  # TODO Create the cognito user pool in cloudformation
  CognitoUserPool:
    Type: String
    Description: Cognito User Pool ARN

Resources:
  # Some of these may warrant their own stack (or potentially be a sub-stack)
  # ServiceRole for Batch
  # InstanceRole for Batch
  # SpotFleetRole for Batch

  RawBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: 0
            TagFilters:
              - Key: archive
                Value: "true"

      Tags:
        - Key: project
          Value: !Ref ProjectTag

  TileBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: project
          Value: !Ref ProjectTag

  GeneralSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub General Security Group for ${StackPrefix}-${Stage}
      Tags:
        - Key: project
          Value: !Ref ProjectTag

  GeneralSGIngressSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt GeneralSG.GroupId
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt GeneralSG.GroupId

  EFSVolume:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: project
          Value: !Ref ProjectTag
      PerformanceMode: maxIO

  EFSMountTarget0:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSVolume
      SecurityGroups:
        - !GetAtt GeneralSG.GroupId
      SubnetId: !Select [0, !Ref SubnetsPublic]

  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSVolume
      SecurityGroups:
        - !GetAtt GeneralSG.GroupId
      SubnetId: !Select [1, !Ref SubnetsPublic]

  DBParamGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Database Parameter Group with pg_stat_statements
      Family: postgres10
      Parameters:
        shared_preload_libraries: pg_stat_statements
      Tags:
        - Key: project
          Value: !Ref ProjectTag

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB Private Subnet
      SubnetIds: !Ref SubnetsPublic
      Tags:
        - Key: project
          Value: !Ref ProjectTag

  DB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName : minerva
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      Engine: postgres
      EngineVersion: 10.3
      MasterUsername: minerva
      MasterUserPassword: 8n#v4DbGOkDb!!47CeDz
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBParameterGroupName: !Ref DBParamGroup
      VPCSecurityGroups:
        - !GetAtt GeneralSG.GroupId
      Tags:
        - Key: project
          Value: !Ref ProjectTag
      CopyTagsToSnapshot: true

  AssumedS3RoleRead:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${StackPrefix}-${Stage}-AssumedS3RoleRead
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::292075781285:root
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${StackPrefix}-${Stage}-AssumedS3RoleReadPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:ListBucket
                  - s3:ListBucketByTags
                  - s3:ListBucketMultipartUploads
                  - s3:ListBucketVersions
                  - s3:ListMultipartUploadParts
                Resource:
                  - !GetAtt TileBucket.Arn
                  - !Sub ${TileBucket.Arn}/*

  AssumedS3RoleWrite:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${StackPrefix}-${Stage}-AssumedS3RoleWrite
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::292075781285:root
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${StackPrefix}-${Stage}-AssumedS3RoleWritePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:ListBucket
                  - s3:ListBucketByTags
                  - s3:ListBucketMultipartUploads
                  - s3:ListBucketVersions
                  - s3:ListMultipartUploadParts
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:AbortMultipartUpload
                Resource:
                  - !GetAtt RawBucket.Arn
                  - !Sub ${RawBucket.Arn}/*

  # SSM
  CognitoUserPoolARN:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${StackPrefix}/${Stage}/common/CognitoUserPoolARN
      Description: Cognito User Pool ARN
      Type: String
      Value: !Ref CognitoUserPool

  EFSID:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${StackPrefix}/${Stage}/common/EFSID
      Description: EFS ID
      Type: String
      Value: !Ref EFSVolume

  S3BucketRawARN:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${StackPrefix}/${Stage}/common/S3BucketRawARN
      Description: S3 Bucket ARN for raw data
      Type: String
      Value: !GetAtt RawBucket.Arn

  S3BucketTileARN:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${StackPrefix}/${Stage}/common/S3BucketTileARN
      Description: S3 Bucket ARN for tile data
      Type: String
      Value: !GetAtt TileBucket.Arn

  GeneralSGID:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${StackPrefix}/${Stage}/common/GeneralSGID
      Description: General Security Group ID
      Type: String
      Value: !GetAtt GeneralSG.GroupId

  DBHost:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${StackPrefix}/${Stage}/common/DBHost
      Description: Database host
      Type: String
      Value: !GetAtt DB.Endpoint.Address

  DBPort:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${StackPrefix}/${Stage}/common/DBPort
      Description: Database port
      Type: String
      Value: !GetAtt DB.Endpoint.Port

  DBName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${StackPrefix}/${Stage}/common/DBName
      Description: Database name
      Type: String
      Value: minerva

  DBUser:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${StackPrefix}/${Stage}/common/DBUser
      Description: Username for database
      Type: String
      Value: minerva

  DBPassword:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${StackPrefix}/${Stage}/common/DBPassword
      Description: Password for database
      Type: String
      Value: 8n#v4DbGOkDb!!47CeDz

  AssumedS3RoleReadARN:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${StackPrefix}/${Stage}/common/AssumedS3RoleReadARN
      Description: Role ARN for assuming S3 read credentials
      Type: String
      Value: !GetAtt AssumedS3RoleRead.Arn

  AssumedS3RoleWriteARN:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${StackPrefix}/${Stage}/common/AssumedS3RoleWriteARN
      Description: Role ARN for assuming S3 write credentials
      Type: String
      Value: !GetAtt AssumedS3RoleWrite.Arn

Outputs:
  EFSID:
    Description: EFS ID
    Value: !Ref EFSVolume
    Export:
      Name: !Sub ${StackPrefix}-${Stage}-EFSID
  S3BucketRawARN:
    Description: S3 Bucket ARN for raw data
    Value: !GetAtt RawBucket.Arn
    Export:
      Name: !Sub ${StackPrefix}-${Stage}-S3BucketRawARN
  S3BucketTileARN:
    Description: S3 Bucket ARN for tile data
    Value: !GetAtt TileBucket.Arn
    Export:
      Name: !Sub ${StackPrefix}-${Stage}-S3BucketTileARN
  GeneralSGID:
    Description: General Security Group ID
    Value: !GetAtt GeneralSG.GroupId
    Export:
      Name: !Sub ${StackPrefix}-${Stage}-GeneralSGID
