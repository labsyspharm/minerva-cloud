service: ${file(${opt:configfile}):StackPrefix}-${file(${opt:configfile}):Stage}-serverless-batch

provider:
  name: aws
  region: ${file(${opt:configfile}):Region}
  stage: ${file(${opt:configfile}):Stage}
  runtime: python3.6
  vpc:
    securityGroupIds:
      - ${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/GeneralSGID}
      # Default SG for SSM
      - ${file(${opt:configfile}):DefaultSecurityGroup}
    # Private subnets with internet routing
    subnetIds: ${file(${opt:configfile}):SubnetsPrivate}
  deploymentBucket:
    name: ${file(${opt:configfile}):DeploymentBucket}
  environment:
    # TODO Inject these from minerva-configfiles
    STACK_PREFIX: ${file(${opt:configfile}):StackPrefix}
    STAGE: ${file(${opt:configfile}):Stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - batch:DescribeJobs
        - batch:SubmitJob
      # TODO Restrict to SSM provided resources (if even possible?)
      Resource: "*"
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource: "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/*"
    - Effect: Allow
      Action: states:StartExecution
      Resource: "arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ScanSM"
    - Effect: Allow
      Action: s3:ListBucket
      Resource: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/S3BucketRawARN}"
    - Effect: Allow
      Action:
        - s3:PutObjectTagging
        - s3:DeleteObject
      Resource: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/S3BucketRawARN}/*"
    - Effect: Allow
      Action:
        - events:PutTargets
        - events:PutRule
        - events:DescribeRule
      Resource: "arn:aws:events:#{AWS::Region}:#{AWS::AccountId}:rule/StepFunctionsGetEventsForBatchJobsRule"

functions:
  addS3ManifestKeysToImport:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-addS3ManifestKeysToImport
    handler: s3_sync.add_s3_manifest_keys_to_import

  prepareSyncEnvironment:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-prepareSyncEnvironment
    handler: s3_sync.prepare_environment

  startScanSFN:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-startScanSFN
    handler: s3_sync.start_scan_sfn

  prepareScanEnvironment:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-prepareScanEnvironment
    handler: bf_scan.prepare_environment

  registerFileset:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-registerFileset
    handler: bf_extract.register_fileset

  prepareExtractEnvironment:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-prepareExtractEnvironment
    handler: bf_extract.prepare_environment

  handleRawStorageLevel:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-handleRawStorageLevel
    handler: bf_extract.handle_raw_storage_level

stepFunctions:
  stateMachines:
    S3EFSSyncSM:
      name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-S3EFSSyncSM
      definition:
        Comment: Complete workflow of syncing data from S3 to EFS
        StartAt: RegisterImportManifest
        States:
          RegisterImportManifest:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-addS3ManifestKeysToImport
            ResultPath: null
            Next: PrepareEnvironment
          PrepareEnvironment:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-prepareSyncEnvironment
            ResultPath: $.syncEnv
            Next: RunBatchJob
          RunBatchJob:
            Type: Task
            Resource: arn:aws:states:::batch:submitJob.sync
            Parameters:
              JobDefinition.$: $.syncEnv.job_definition
              JobName.$: $.syncEnv.job_name
              JobQueue.$: $.syncEnv.job_queue
              Parameters.$: $.syncEnv.batch_parameters
            ResultPath: $.batchJobDetails
            Next: StartScanSFN
          StartScanSFN:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-startScanSFN
            InputPath: $.import_uuid
            ResultPath: $.scanArn
            End: true

    ScanSM:
      name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ScanSM
      definition:
        Comment: Complete worlflow of scanning data in EFS for filesets
        StartAt: PrepareEnvironment
        States:
          PrepareEnvironment:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-prepareScanEnvironment
            ResultPath: $.syncEnv
            Next: RunBatchJob
          RunBatchJob:
            Type: Task
            Resource: arn:aws:states:::batch:submitJob.sync
            Parameters:
              JobDefinition.$: $.syncEnv.job_definition
              JobName.$: $.syncEnv.job_name
              JobQueue.$: $.syncEnv.job_queue
              Parameters.$: $.syncEnv.batch_parameters
            ResultPath: $.batchJobDetails
            End: True

    ExtractSM:
      name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ExtractSM
      definition:
        Comment: Complete workflow of extracting Filesets in EFS into metadata and pyramid tiles
        StartAt: RegisterFileset
        States:
          RegisterFileset:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-registerFileset
            ResultPath: $.fileset_uuid
            Next: PrepareEnvironment
          PrepareEnvironment:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-prepareExtractEnvironment
            ResultPath: $.syncEnv
            Next: RunBatchJob
          RunBatchJob:
            Type: Task
            Resource: arn:aws:states:::batch:submitJob.sync
            Parameters:
              JobDefinition.$: $.syncEnv.job_definition
              JobName.$: $.syncEnv.job_name
              JobQueue.$: $.syncEnv.job_queue
              Parameters.$: $.syncEnv.batch_parameters
            ResultPath: $.batchJobDetails
            Next: HandleRawStorageLevel
          HandleRawStorageLevel:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-handleRawStorageLevel
            ResultPath: null
            End: true

# TODO Revert to using stock serverless-step-functions (see package.json) if the
# issue regarding key name referencing can be resolved (potentially with my PR):
# https://github.com/horike37/serverless-step-functions/pull/143

resources:
  Resources:

    S3EFSSyncStepARN:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/batch/S3EFSSyncStepARN
        Description: ARN of step function for S3 EFS Sync
        Type: String
        Value:
          Ref: S3EFSSyncSMStepFunctionsStateMachine

    ScanStepARN:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/batch/ScanStepARN
        Description: ARN of step function for scan
        Type: String
        Value:
          Ref: ScanSMStepFunctionsStateMachine

    ExtractStepARN:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/batch/ExtractStepARN
        Description: ARN of step function for extract
        Type: String
        Value:
          Ref: ExtractSMStepFunctionsStateMachine

  #
  # Outputs:
  #   writeEvent:
  #     Value:
  #       Ref: WriteEventLambdaFunction
  #     Export:
  #       Name: ${self:service}-${opt:stage}-LambdaWriteEvent


plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
  - serverless-step-functions
custom:
  pythonRequirements:
    dockerizePip: non-linux
