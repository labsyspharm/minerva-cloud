service: ${file(${opt:config}):StackPrefix}-${file(${opt:config}):Stage}-serverless-batch

provider:
  name: aws
  runtime: python3.6
  vpc:
    securityGroupIds:
      - ${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/GeneralSGID}
      # Default SG for SSM
      - ${file(${opt:config}):DefaultSecurityGroup}
    # Private subnets with internet routing
    subnetIds: ${file(${opt:config}):SubnetsPrivate}
  deploymentBucket:
    name: ${file(${opt:config}):DeploymentBucket}
  environment:
    # TODO Inject these from minerva-configs
    STACK_PREFIX: ${file(${opt:config}):StackPrefix}
    STAGE: ${file(${opt:config}):Stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - batch:DescribeJobs
        - batch:SubmitJob
      # TODO Restrict to SSM provided resources (if even possible?)
      Resource: "*"
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource: "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/*"
    - Effect: Allow
      Action: states:StartExecution
      Resource: "arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-BFScanSM"
    - Effect: Allow
      Action: s3:ListBucket
      Resource: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/S3BucketRawARN}"
    - Effect: Allow
      Action:
        - s3:PutObjectTagging
        - s3:DeleteObject
      Resource: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/S3BucketRawARN}/*"

functions:
  addS3ManifestKeysToImport:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-addS3ManifestKeysToImport
    handler: s3_sync.addS3ManifestKeysToImport

  submitSyncJob:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-submitSyncJob
    handler: s3_sync.submit_job

  checkStatusSyncJob:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-checkStatusSyncJob
    handler: s3_sync.check_status_job

  startScanSFN:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-startScanSFN
    handler: s3_sync.start_scan_sfn

  submitBFScanJob:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-submitBFScanJob
    handler: bf_scan.submit_job

  checkStatusBFScanJob:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-checkStatusBFScanJob
    handler: bf_scan.check_status_job

  registerBFU:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-registerBFU
    handler: bf_extract.register_bfu

  submitBFExtractJob:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-submitBFExtractJob
    handler: bf_extract.submit_job

  checkStatusBFExtractJob:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-checkStatusBFExtractJob
    handler: bf_extract.check_status_job

  handleRawStorageLevel:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-handleRawStorageLevel
    handler: bf_extract.handle_raw_storage_level

stepFunctions:
  stateMachines:
    S3EFSSyncSM:
      name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-S3EFSSyncSM
      definition:
        Comment: Complete workflow of syncing data from S3 to EFS
        StartAt: RegisterImportManifest
        States:
          RegisterImportManifest:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-addS3ManifestKeysToImport
            ResultPath: null
            Next: SubmitJob
          SubmitJob:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-submitSyncJob
            ResultPath: $.jobId
            Next: Wait30
          Wait30:
            Type: Wait
            Seconds: 30
            Next: GetJobStatus
          GetJobStatus:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-checkStatusSyncJob
            InputPath: $.jobId
            ResultPath: $.status
            Next: IsJobComplete
          IsJobComplete:
            Type: Choice
            Choices:
              - Variable: $.status
                StringEquals: FAILED
                Next: JobFailed
              - Variable: $.status
                StringEquals: SUCCEEDED
                Next: GetFinalJobStatus
            Default: Wait30
          JobFailed:
            Type: Fail
            Cause: S3 Sync Batch Job Failed
            Error: DescribeJob returned FAILED
          GetFinalJobStatus:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-checkStatusSyncJob
            InputPath: $.jobId
            ResultPath: $.status
            Next: StartScanSFN
          StartScanSFN:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-startScanSFN
            InputPath: $.import_uuid
            ResultPath: $.scanArn
            End: true

    BFScanSM:
      name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-BFScanSM
      definition:
        Comment: Complete worlflow of scanning data in EFS with Bio-Formats
        StartAt: SubmitJob
        States:
          SubmitJob:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-submitBFScanJob
            ResultPath: $.jobId
            Next: Wait30
          Wait30:
            Type: Wait
            Seconds: 30
            Next: GetJobStatus
          GetJobStatus:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-checkStatusBFScanJob
            InputPath: $.jobId
            ResultPath: $.status
            Next: IsJobComplete
          IsJobComplete:
            Type: Choice
            Choices:
              - Variable: $.status
                StringEquals: FAILED
                Next: JobFailed
              - Variable: $.status
                StringEquals: SUCCEEDED
                Next: GetFinalJobStatus
            Default: Wait30
          JobFailed:
            Type: Fail
            Cause: Bioformats Scan Job Failed
            Error: DescribeJob returned FAILED
          GetFinalJobStatus:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-checkStatusBFScanJob
            InputPath: $.jobId
            End: true

    BFExtractSM:
      name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-BFExtractSM
      definition:
        Comment: Complete workflow of extracting data in EFS with Bio-Formats
        StartAt: RegisterBFU
        States:
          RegisterBFU:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-registerBFU
            ResultPath: $.bfuUuid
            Next: SubmitJob
          SubmitJob:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-submitBFExtractJob
            ResultPath: $.jobId
            Next: Wait30
          Wait30:
            Type: Wait
            Seconds: 30
            Next: GetJobStatus
          GetJobStatus:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-checkStatusBFExtractJob
            InputPath: $.jobId
            ResultPath: $.status
            Next: IsJobComplete
          IsJobComplete:
            Type: Choice
            Choices:
              - Variable: $.status
                StringEquals: FAILED
                Next: JobFailed
              - Variable: $.status
                StringEquals: SUCCEEDED
                Next: HandleRawStorageLevel
            Default: Wait30
          JobFailed:
            Type: Fail
            Cause: Bioformats Extract Job Failed
            Error: DescribeJob returned FAILED
          HandleRawStorageLevel:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-handleRawStorageLevel
            ResultPath: null
            Next: GetFinalJobStatus
          GetFinalJobStatus:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-checkStatusBFExtractJob
            InputPath: $.jobId
            End: true



resources:
  Resources:

    S3EFSSyncStepARN:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/batch/S3EFSSyncStepARN
        Description: ARN of step function for S3 EFS Sync
        Type: String
        Value:
          Ref: MinervaDashtestDashdevDashS3EFSSyncSM

    BFScanStepARN:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/batch/BFScanStepARN
        Description: ARN of step function for Bio-Formats scan
        Type: String
        Value:
          Ref: MinervaDashtestDashdevDashBFScanSM

    BFExtractStepARN:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/batch/BFExtractStepARN
        Description: ARN of step function for Bio-Formats extract
        Type: String
        Value:
          Ref: MinervaDashtestDashdevDashBFExtractSM

  #
  # Outputs:
  #   writeEvent:
  #     Value:
  #       Ref: WriteEventLambdaFunction
  #     Export:
  #       Name: ${self:service}-${opt:stage}-LambdaWriteEvent


plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
  - serverless-step-functions
custom:
  pythonRequirements:
    dockerizePip: non-linux
