service: ${file(${opt:config}):StackPrefix}-${file(${opt:config}):Stage}-serverless-api

provider:
  name: aws
  runtime: python3.6
  vpc:
    securityGroupIds:
      - ${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/GeneralSGID}
      # Default SG for SSM
      - ${file(${opt:config}):DefaultSecurityGroup}
    # Private subnets with internet routing
    subnetIds: ${file(${opt:config}):SubnetsPrivate}
  deploymentBucket:
    name: ${file(${opt:config}):DeploymentBucket}
  environment:
    STACK_PREFIX: ${file(${opt:config}):StackPrefix}
    STAGE: ${file(${opt:config}):Stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/S3BucketTileARN}"
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/S3BucketTileARN}/*"
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource: "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/*"

  apiGateway:
    # REST API resource ID. Default is generated by the framework
    restApiId:
      Fn::ImportValue: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ApiGatewayRestApiId
    # Root resource, represent as / path
    restApiRootResourceId:
      Fn::ImportValue: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ApiGatewayRestApiRootResourceId
    # Resource IDs
    restApiResources:
      /image/{uuid}:
        Fn::ImportValue: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ApiGatewayRestApiResourceImageUuidId

functions:

  renderTile:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-renderTile
    handler: handler.render_tile
    events:
      - http:
          method: GET
          cors: true
          path: /image/{uuid}/render-tile/{x}/{y}/{z}/{t}/{level}/{channels+}
          contentHandling: CONVERT_TO_BINARY
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Fn::ImportValue: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ApiGatewayAuthorizerID

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
  - serverless-apigwy-binary
custom:
  pythonRequirements:
    dockerizePip: non-linux
    dockerFile: Dockerfile
