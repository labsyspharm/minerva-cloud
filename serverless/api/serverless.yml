service: minerva-test-serverless-api

provider:
  name: aws
  runtime: python3.6
  vpc:
    securityGroupIds:
      - ${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/GeneralSGID}
      # TODO From SSM or replace completely, or from minerva-configs?
      - sg-6ef8c813 # Default SG for SSM
    # Private subnets with internet routing
    # TODO Inject these from minerva-configs
    subnetIds:
      - subnet-7f4f8118
      - subnet-950ecebb
  deploymentBucket:
    name: minerva-serverless-deployment
  environment:
    # TODO Inject these from minerva-configs
    STACK_PREFIX: minerva-test
    STAGE: dev
# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/S3BucketTileARN}"
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/S3BucketTileARN}/*"
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource: "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/*"

  apiGateway:
    # TODO Get from SSM (not sure if possible for root resource ID or the resources?)
    restApiId: 5yatimj9u4 # REST API resource ID. Default is generated by the framework
    restApiRootResourceId: 7qify24mub # Root resource, represent as / path
    restApiResources:
      /image/{uuid}: kkxvip

functions:

  renderTile:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-renderTile
    handler: handler.render_tile
    events:
      - http:
          method: GET
          cors: true
          path: /image/{uuid}/render-tile/{x}/{y}/{z}/{t}/{level}/{channels+}
          contentHandling: CONVERT_TO_BINARY
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/api/ApiGatewayAuthorizerID}"

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
  # - serverless-apigw-binary
  - serverless-apigwy-binary
custom:
  pythonRequirements:
    dockerizePip: non-linux
    dockerFile: Dockerfile

  # apigwBinary:
  #   types:
  #     - "image/png"
