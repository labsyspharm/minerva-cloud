service: ${file(${opt:configfile}):StackPrefix}-${file(${opt:configfile}):Stage}-serverless-author

package:
  exclude:
    - node_modules/**

provider:
  name: aws
  endpointType: REGIONAL
  tags:
    project: ${file(${opt:configfile}):ProjectTag}
  region: ${file(${opt:configfile}):Region}
  stage: ${file(${opt:configfile}):Stage}
  runtime: python3.7
  memorySize: 512
  versionFunctions: false
  vpc:
    securityGroupIds:
      - ${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/GeneralSGID}
      # Default SG for SSM
      - ${file(${opt:configfile}):DefaultSecurityGroup}
    # Private subnets with internet routing
    subnetIds: ${file(${opt:configfile}):SubnetsPrivate}
  deploymentBucket:
    name: ${file(${opt:configfile}):DeploymentBucket}
  environment:
    STACK_PREFIX: ${file(${opt:configfile}):StackPrefix}
    STAGE: ${file(${opt:configfile}):Stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/author/S3BucketStoryARN}"
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/author/S3BucketStoryARN}/*"
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/author/S3BucketStoryARN}/*"
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/author/S3BucketPublishedARN}/*"
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/author/S3MinervaStoryBaseBucketARN}/*"
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource: "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-renderTile"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-getImageDimensions"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-publishStoryInternal"


  apiGateway:
    # REST API resource ID. Default is generated by the framework
    restApiId:
      Fn::ImportValue: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ApiGatewayRestApiId
    # Root resource, represent as / path
    restApiRootResourceId:
      Fn::ImportValue: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ApiGatewayRestApiRootResourceId

functions:

  saveStory:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-saveStory
    handler: src.handler.save_story
    events:
      - http:
          method: POST
          cors: true
          path: /author/story
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Fn::ImportValue: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ApiGatewayAuthorizerID


  updateStory:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-updateStory
    handler: src.handler.update_story
    events:
      - http:
          method: PUT
          cors: true
          path: /author/story
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Fn::ImportValue: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ApiGatewayAuthorizerID


  getStory:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-getStory
    handler: src.handler.get_story
    events:
      - http:
          method: GET
          cors: true
          path: /author/story/{uuid}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Fn::ImportValue: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ApiGatewayAuthorizerID


  listStories:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-listStories
    handler: src.handler.list_stories
    events:
      - http:
          method: GET
          cors: true
          path: /author/story
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Fn::ImportValue: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ApiGatewayAuthorizerID

  publishStory:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-publishStory
    handler: src.handler.publish_story
    memorySize: 256
    timeout: 30
    events:
      - http:
          method: POST
          cors: true
          path: /author/story/{uuid}/publish
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Fn::ImportValue: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ApiGatewayAuthorizerID

  publishStoryInternal:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-publishStoryInternal
    handler: src.handler.publish_story_internal
    memorySize: 192
    timeout: 900

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters

custom:
  pythonRequirements:
    useDownloadCache: true
    useStaticCache: true
    dockerizePip: false
    slim: true
    strip: false
    slimPatterns:
      - "**/cv2/data/haarcascade*.xml"
      - "**/tests/*"
      - "boto3"
      - "botocore"