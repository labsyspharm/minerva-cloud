service: ${file(${opt:config}):StackPrefix}-${file(${opt:config}):Stage}-serverless-db

provider:
  name: aws
  region: ${file(${opt:config}):Region}
  stage: ${file(${opt:config}):Stage}
  runtime: python3.6
  vpc:
    securityGroupIds:
      - ${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/GeneralSGID}
      # Default SG for SSM
      - ${file(${opt:config}):DefaultSecurityGroup}
    # Private subnets with internet routing
    subnetIds: ${file(${opt:config}):SubnetsPrivate}
  deploymentBucket:
    name: ${file(${opt:config}):DeploymentBucket}
  environment:
    STACK_PREFIX: ${file(${opt:config}):StackPrefix}
    STAGE: ${file(${opt:config}):Stage}
  # TODO Move role creation to common and reference here (remember logging)?
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/S3BucketTileARN}"
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/S3BucketTileARN}/*"
    - Effect: Allow
      Action:
        - sts:AssumeRole
      Resource:
        - "arn:aws:iam::#{AWS::AccountId}:role/${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-AssumedS3RoleRead"
        - "arn:aws:iam::#{AWS::AccountId}:role/${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-AssumedS3RoleWrite"
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource: "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/*"
    - Effect: Allow
      Action:
        - states:StartExecution
      Resource: "arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-S3EFSSyncSM"
    - Effect: Allow
      Action:
        - cognito-idp:ListUsers
      Resource: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/CognitoUserPoolARN}"

functions:

  cognitoDetails:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-cognitoDetails
    handler: handler.cognito_details
    events:
      - http:
          method: GET
          cors: true
          path: /cognito_details
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createGroup:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-createGroup
    handler: handler.create_group
    events:
      - http:
          method: POST
          cors: true
          path: /group
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createMembership:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-createMembership
    handler: handler.create_membership
    events:
      - http:
          method: POST
          cors: true
          path: /membership/{group_uuid}/{user_uuid}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createRepository:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-createRepository
    handler: handler.create_repository
    events:
      - http:
          method: POST
          cors: true
          path: /repository
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createImport:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-createImport
    handler: handler.create_import
    events:
      - http:
          method: POST
          cors: true
          path: /import
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getGroup:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-getGroup
    handler: handler.get_group
    events:
      - http:
          method: GET
          cors: true
          path: /group/{uuid}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getMembership:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-getMembership
    handler: handler.get_membership
    events:
      - http:
          method: GET
          cors: true
          path: /membership/{group_uuid}/{user_uuid}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getRepository:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-getRepository
    handler: handler.get_repository
    events:
      - http:
          method: GET
          cors: true
          path: /repository/{uuid}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getImage:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-getImage
    handler: handler.get_image
    events:
      - http:
          method: GET
          cors: true
          path: /image/{uuid}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getImageDimensions:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-getImageDimensions
    handler: handler.get_image_dimensions
    events:
      - http:
          method: GET
          cors: true
          path: /image/{uuid}/dimensions
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getImageCredentials:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-getImageCredentials
    handler: handler.get_image_credentials
    events:
      - http:
          method: GET
          cors: true
          path: /image/{uuid}/credentials
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getImport:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-getImport
    handler: handler.get_import
    events:
      - http:
          method: GET
          cors: true
          path: /import/{uuid}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getImportCredentials:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-getImportCredentials
    handler: handler.get_import_credentials
    events:
      - http:
          method: GET
          cors: true
          path: /import/{uuid}/credentials
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  listImportsInRepository:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-listImportsInRepository
    handler: handler.list_imports_in_repository
    events:
      - http:
          method: GET
          cors: true
          path: /repository/{uuid}/imports
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  listFilesetsInImport:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-listFilesetsInImport
    handler: handler.list_filesets_in_import
    events:
      - http:
          method: GET
          cors: true
          path: /import/{uuid}/filesets
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  listKeysInImport:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-listKeysInImport
    handler: handler.list_keys_in_import
    events:
      - http:
          method: GET
          cors: true
          path: /import/{uuid}/keys
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  listImagesInFileset:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-listImagesInFileset
    handler: handler.list_images_in_fileset
    events:
      - http:
          method: GET
          cors: true
          path: /fileset/{uuid}/images
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  listKeysInFileset:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-listKeysInFileset
    handler: handler.list_keys_in_fileset
    events:
      - http:
          method: GET
          cors: true
          path: /fileset/{uuid}/keys
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateMembership:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-updateMembership
    handler: handler.update_membership
    events:
      - http:
          method: PUT
          cors: true
          path: /membership/{group_uuid}/{user_uuid}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateImport:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-updateImport
    handler: handler.update_import
    events:
      - http:
          method: PUT
          cors: true
          path: /import/{uuid}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateRepository:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-updateRepository
    handler: handler.update_repository
    events:
      - http:
          method: PUT
          cors: true
          path: /repository/{uuid}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  deleteMembership:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-deleteMembership
    handler: handler.delete_membership
    events:
      - http:
          method: DELETE
          cors: true
          path: /membership/{group_uuid}/{user_uuid}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  deleteRepository:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-deleteRepository
    handler: handler.delete_repository
    events:
      - http:
          method: DELETE
          cors: true
          path: /repository/{uuid}
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # Internal
  initDb:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-initDb
    handler: internal._init_db

  queryDb:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-queryDb
    handler: internal._query_db

  createFileset:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-createFileset
    handler: internal.create_fileset

  addKeysToImport:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-addKeysToImport
    handler: internal.add_keys_to_import

  setFilesetComplete:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-setFilesetComplete
    handler: internal.set_fileset_complete

  createUser:
    name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-createUser
    handler: internal.create_user

  #
  # list_repositories_for_user:
  #   handler: handler.list_repositories_for_user
  #   events:
  #     - http:
  #         method: GET
  #         cors: true
  #         path: /repository
  #         authorizer:
  #           # TODO Read from SSM
  #           arn: arn:aws:cognito-idp:us-east-1:292075781285:userpool/us-east-1_d9h9zgWpx
  #
  # list_users_in_group:
  #   handler: handler.list_users_in_group
  #   events:
  #     - http:
  #         method: GET
  #         cors: true
  #         path: /group/{uuid}
  #         authorizer:
  #           # TODO Read from SSM
  #           arn: arn:aws:cognito-idp:us-east-1:292075781285:userpool/us-east-1_d9h9zgWpx
  #
  #
  # get_image_metadata:
  #   handler: handler.get_image_metadata
  #   events:
  #     - http:
  #         method: GET
  #         cors: true
  #         path: /image/{uuid}/metadata
  #         authorizer:
  #           # TODO Read from SSM
  #           arn: arn:aws:cognito-idp:us-east-1:292075781285:userpool/us-east-1_d9h9zgWpx
  #
  # # TODO Use /grant and all query parameters?
  # # Or /grant/{resource}/{grantee}?
  # grant_repository_to_user:
  #   handler: handler.grant_repository_to_user
  #   events:
  #     - http:
  #         method: POST
  #         cors: true
  #         path: /repository/{uuid}/grant/user/{grantee}
  #         authorizer:
  #           # TODO Read from SSM
  #           arn: arn:aws:cognito-idp:us-east-1:292075781285:userpool/us-east-1_d9h9zgWpx


resources:
  Resources:

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-CognitoAuthorizer
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/CognitoUserPoolARN}"

    SetFilesetCompleteLambdaARN:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/api/SetFilesetCompleteLambdaARN
        Description: ARN of lambda function to complete a Fileset and register its images
        Type: String
        Value:
          Fn::GetAtt:
            - SetFilesetCompleteLambdaFunction
            - Arn

    TriggerPolicyCreateUser:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt:
            - CreateUserLambdaFunction
            - Arn
        Principal: cognito-idp.amazonaws.com
        SourceArn: "${ssm:/${self:provider.environment.STACK_PREFIX}/${self:provider.environment.STAGE}/common/CognitoUserPoolARN}"

  Outputs:

    ApiGatewayRestApiId:
      Description: ID of API Gateway REST API
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ApiGatewayRestApiId

    ApiGatewayRestApiRootResourceId:
      Description: ID of API Gateway Root Resource
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ApiGatewayRestApiRootResourceId

    ApiGatewayAuthorizerID:
      Description: ID of API Gateway Authorizer
      Value:
        Ref: ApiGatewayAuthorizer
      Export:
        Name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ApiGatewayAuthorizerID

    ApiGatewayRestApiResourceImageUuidId:
      Description: ID of API Gateway REST API Resource /image/{uuid}
      Value:
        Ref: ApiGatewayResourceImageUuidVar
      Export:
        Name: ${self:provider.environment.STACK_PREFIX}-${self:provider.environment.STAGE}-ApiGatewayRestApiResourceImageUuidId

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
  - serverless-apigw-binary
custom:
  pythonRequirements:
    dockerizePip: non-linux

  apigwBinary:
    types:
      - "image/png"
